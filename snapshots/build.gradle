import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java'
    id 'maven-publish'
    id 'xyz.wagyourtail.unimined' version '1.3.10-SNAPSHOT'
}

group 'me.earth'
version "$minecraft_version-${project(':api').project_version}"

base {
    archivesName = 'mc-runtime-test'
}

sourceSets {
    fabric
}

repositories {
    mavenCentral()
    maven {
        name = "sponge"
        url = "https://repo.spongepowered.org/maven"
    }
    maven {
        url = "https://maven.wagyourtail.xyz/releases"
    }

    maven {
        name = '3arthMaven'
        url = 'https://3arthqu4ke.github.io/maven'
    }
}

unimined.minecraft {
    version project.minecraft_version

    mappings {
        mojmap()
        // intermediary()
        // yarn(1)

        devFallbackNamespace "mojmap"

        /*stub.withMappings("intermediary", ["yarn"]) {
            c("net/minecraft/class_1927", []) {
                m("method_55109", "()Lnet/minecraft/class_243;", ["getPos"])
            }
        }*/
    }

    defaultRemapJar = false
}

unimined.minecraft(sourceSets.fabric) {
    combineWith(sourceSets.main)

    fabric {
        loader project.fabric_version
    }

    defaultRemapJar = true
}

configurations {
    mainImplementation
    lwjglAgent.extendsFrom runtimeOnly
    jarLibs
    implementation.extendsFrom jarLibs
}

for (String platform_capitalized : ['Fabric']) {
    def platform = platform_capitalized.toLowerCase()
    def remapJarTask = tasks.named("remap${platform_capitalized}Jar", AbstractArchiveTask).get()
    def shadowTask = tasks.register("${platform}ShadowJar", ShadowJar) {
        dependsOn(remapJarTask)
        it.group = 'build'
        it.archiveClassifier = "${platform}-release"
        from remapJarTask.outputs
        it.configurations += [ project.configurations.jarLibs ]
        exclude "**/module-info.class"
    }
    tasks.named('build') { finalizedBy(shadowTask) }
}

dependencies {
    compileOnly 'org.spongepowered:mixin:0.8.7'
    compileOnly 'me.earth.headlessmc:headlessmc:1.8.1'
    lwjglAgent 'me.earth.headlessmc:headlessmc-lwjgl:1.8.1'
    // yes, I actually want this at runtime to use assertions!
    jarLibs 'org.junit.jupiter:junit-jupiter-api:5.10.1'
    jarLibs project(':api')
}

afterEvaluate {
    fabricRunClient {
        standardInput = System.in
        if (rootProject.property('hmc.lwjgl').toBoolean()) {
            jvmArgs += ["-javaagent:${configurations.lwjglAgent.files.iterator().next()}"]
            systemProperties['joml.nounsafe'] = 'true'
            systemProperties['fabric.systemLibraries'] = "${configurations.lwjglAgent.files.iterator().next()}"
        }
    }
}

processFabricResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(org.gradle.jvm.tasks.Jar).configureEach {
    from("LICENSE") {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
        rename { "${it}_${project.archivesBaseName}" }
    }

    manifest {
        attributes(
            'Implementation-Title': 'MC-Runtime-Test',
            'MixinConfigs': "mc_runtime_test.mixins.json",
            'Implementation-Version': project.version,
        )
    }
}

afterEvaluate {
    publishing {
        publications {
            "${name.toLowerCase()}"(MavenPublication) {
                ((MavenPublication) it).groupId "${group}"
                ((MavenPublication) it).artifactId "${archivesBaseName.toLowerCase()}"
                ((MavenPublication) it).version "${version}"
                from components.java
                for (String platform: ['Fabric']) {
                    String platform_lower = platform.toLowerCase()
                    artifact tasks.named("${platform_lower}Jar").get()
                    artifact tasks.named("remap${platform}Jar").get()
                    artifact tasks.named("${platform_lower}ShadowJar").get()
                }
            }
        }

        repositories {
            if (System.getenv('DEPLOY_TO_GITHUB_PACKAGES_URL') == null) {
                maven {
                    name = 'BuildDirMaven'
                    url = rootProject.projectDir.toPath().parent.resolve('build').resolve('maven')
                }
            } else {
                maven {
                    name = 'GithubPagesMaven'
                    url = System.getenv('DEPLOY_TO_GITHUB_PACKAGES_URL')
                    credentials {
                        username = System.getenv('GITHUB_USER')
                        password = System.getenv('GITHUB_TOKEN')
                    }
                }
            }
        }
    }
}
